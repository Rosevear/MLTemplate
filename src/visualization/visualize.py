import pandas as pd
import config
import utils
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split


if __name__ == '__main__':
    
    #Set random seeds for reproducibility
    utils.freeze_random_generators(config.RANDOM_SEED)

    logger = utils.setup_logger()

    print("Loading processed data to visualize...")
    data_source = config.PROCESSED_DATA_DIR / config.CUR_DATA_FILE
    data = utils.load_csv(data_source, logger)

    #Extract the data set targets as their own column and remove from the original dataset
    targets = data["ACCEPTED"]
    del data["ACCEPTED"]
    
    #We split the data so that we are visualizing the same data generated by the same random state as that used in the experiment
    X_train, X_test, y_train, y_test = train_test_split(data, targets,
                                                        train_size=config.TRAINING_SET_SIZE,
                                                        random_state=config.RANDOM_SEED,
                                                        shuffle=True,
                                                        stratify=targets)

    #Visualize the distribution of each feature #NOTE: See the Returns ection of the docs for how the number of rows column in the grid impacts the plt.sublots return value data type https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.subplots.html
    print('Plotting bar charts for the distribution of categorical features...')
    fig, axs = plt.subplots(4, 4)
    i = 0
    for row in range(0, 4):
        for column in range(0, 4):
            cat_feature = config.CATEGORICAL_COLUMNS[i]
            data[cat_feature].value_counts().plot(kind='bar', title=cat_feature, ax=axs[row][column])
            i += 1

    print('Plotting bar charts for the distribution of binary features...')
    fig, axs = plt.subplots(1, 4)
    for i in range(0, 4):
        cat_feature = config.BINARY_COLUMNS[i]
        data[cat_feature].value_counts().plot(
            kind='bar', title=cat_feature, ax=axs[i])

    print("Plotting histograms for the distribution of numerical features..")
    data.hist(column=config.NUMERICAL_COLUMNS)
    plt.show()

